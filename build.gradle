plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
    id 'me.champeau.jmh' version '0.7.2'
}

group = 'ding.co'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    
    annotationProcessor 'org.projectlombok:lombok'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.openjdk.jmh:jmh-core:1.37'
    testAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'

    testImplementation 'org.testcontainers:testcontainers:1.19.6'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.6'
    testImplementation 'org.testcontainers:mysql:1.19.6'
    
    // 테스트에서 Lombok 사용을 위한 의존성 추가
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

}

jacoco {
    toolVersion = "0.8.9"
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
    jacoco {
        enabled = true
        destinationFile = file("${buildDir}/jacoco/test.exec")
        includes = []
        excludes = []
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/Q*",           // QueryDSL
                    "**/*Application*", // 메인 애플리케이션 클래스
                    "**/*Config*",      // 설정 클래스
                    "**/dto/*",         // DTO 클래스
                    "**/entity/*"       // 엔티티 클래스
            ])
        }))
    }
    
    dependsOn test
}

// jacocoTestCoverageVerification {
//     violationRules {
//         rule {
//             element = 'CLASS'
//             limit {
//                 counter = 'LINE'
//                 value = 'COVEREDRATIO'
//                 minimum = 0.80  // 최소 80% 라인 커버리지
//             }
//             excludes = [
//                     '**/Q*',
//                     '**/*Application*',
//                     '**/*Config*',
//                     '**/dto/*',
//                     '**/entity/*'
//             ]
//         }
        
//         rule {
//             element = 'CLASS'
//             limit {
//                 counter = 'BRANCH'
//                 value = 'COVEREDRATIO'
//                 minimum = 0.80  // 최소 80% 브랜치 커버리지
//             }
//             excludes = [
//                     '**/Q*',
//                     '**/*Application*',
//                     '**/*Config*',
//                     '**/dto/*',
//                     '**/entity/*'
//             ]
//         }
//     }
// }

check {
    dependsOn jacocoTestCoverageVerification
}

jmh {
    iterations = 5
    warmupIterations = 2
    fork = 2
    failOnError = true
    resultFormat = 'JSON'
    resultsFile = project.file("${buildDir}/reports/jmh/results.json")
}
